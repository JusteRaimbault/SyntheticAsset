bigcomponent
help(betweeness)
help(betwenness)
betweenness(bigcomonent)
betweenness(bigcomponent)
hist(betweenness(bigcomponent))
hist(betweenness(bigcomponent),break=100)
hist(betweenness(bigcomponent),breaks=100)
degree.distribution(bigcomponent)
plot(degree.distribution(bigcomponent))
plot(degree.distribution(bigcomponent),type=l)
plot(degree.distribution(bigcomponent),type="l")
area <- center_bbox(2.3815,48.8265,2000,2000)
data <- get_osm(area,source = api)
data
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
graph = as_igraph(data_ways)
clusters(graph)
bigcomponent = decompose.graph(graph)[[1]]
hist(betweenness(bigcomponent),breaks=100)
hist(betweenness(bigcomponent),breaks=500)
hist(log(betweenness(bigcomponent)),breaks=500)
hist(betweenness(bigcomponent),breaks=500)
betweenness(bigcomponent)
mean(betweenness(bigcomponent))
radius(bigcomponent)
graph
graph$weight
E(graph)
leading.eigenvector.community(bigcomponent)
leading.eigenvector.community(bigcomponent,steps=10000)
edge.betweenness.community(bigcomponent)
membership(edge.betweenness.community(bigcomponent))
help(layout)
layout.fruchterman.reingold(graph)
layout.fruchterman.reingold(bigcomponent)
com <- membership(edge.betweenness.community(bigcomponent))
lay<-layout.fruchterman.reingold(bigcomponent)
plot(bigcomponent,layout=lay,col=com)
plot(bigcomponent,layout=lay,vertex.col=com)
help(igraph.plot)
com
plot(bigcomponent,layout=lay)
lay
plot(bigcomponent,layout=lay)
plot.graph(bigcomponent,layout=lay)
plot.igraph(bigcomponent,layout=lay)
library(rgexf)
help(rgexf)
igraph.to.graph(bigcomponent)
igraph.to.gexf(bigcomponent)
E(bigcomponent)
E(bigcomponent)$weights
help(as_igrph)
help(as_igraph)
source(as_igraph)
view_source()
graph
graph$V
V(graph)
E(graph)
V(graph)$weight
help(attr)
plot.igraph(bigcomponent,layout=layout.fruchterman.reingold,vertex.color=com)
dim(V(bigcomponent))
V(bigcomponent)
length(V(bigcomponent))
length(E(bigcomponent))
plot.igraph(bigcomponent,layout=layout.fruchterman.reingold,vertex.color=com)
help(plot.igraph)
help(layout)
plot.igraph(bigcomponent,layout=layout.auto,vertex.color=com,label=NA)
plot.igraph(bigcomponent,layout=layout.auto,vertex.color=com,vertex.label=NA)
length(E(bigcomponent))
E(bigcomponent)$weight
V(bigcomponent)$weight
E(bigcomponent)$weight
help(igraph)
str.igraph(bigcomponent)
print.igraph(bigcomponent)
get.edge.attribute(bigcomponent)
names(V(bigcomponent))
graph.attributes(graph)
edge.attributes(graph)
names(edge.attributes(graph))
names(vertex.attributes(graph))
data_ways
data_ways$nodes
names(data_ways$nodes)
naattrsmes(data_ways$nodes)
attrs(data_ways$nodes)
data_ways$nodes$attrs
data_ways$nodes$attrs[1:10,]
V(graph)$id
names(vertex.attributes(graph))
V(graph)$name
names(data$ways$attrs)
data_ways$nodes$attrs
data_ways$nodes$attrs
names(data_ways$nodes$attrs)
x = data_ways$nodes$attrs$lat
y = x = data_ways$nodes$attrs$lon
y =  data_ways$nodes$attrs$lon
x = data_ways$nodes$attrs$lat
y =  data_ways$nodes$attrs$lon
x = data_ways$nodes$attrs$lat
y = data_ways$nodes$attrs$lon
V(graph)$name
V(graph)$x=x
length(x)
length(V(graph))
length(V(graph)$name)
V(graph)$name==names(data_ways$nodes$attrs)
names(data_ways$nodes$attrs)
data_ways$nodes$attrs$id
data_ways$nodes$attrs$id==V(graph)$name
help(graph.empty)
data_ways$nodes
data_ways$nodes$attrs
head(data_ways$nodes$attrs)
head(data_ways$ways$attrs)
head(data_ways$ways)
head(data_ways$ways,n=1)
data_ways$ways[[1]]
names(data_ways$ways)
names(data_ways$ways$refs)
names(data_ways$ways$tags)
names(data_ways$ways)
names(data_ways$ways$attrs)
names(data_ways)
names(data_ways$relations)
names(data_ways$relations$attrs)
names(data_ways$relations$tags)
names(data_ways$relations$refs)
data_ways$relations$refs$type
data_ways$relations$refs$ref
summary(data_ways)
help(as_igraph)
osmar$ways$attrs$uid
data_ways$ways$attrs$uid
data_ways$ways$refs$uid
data_ways$ways$refs
names(data_ways$ways$refs)
graph = graph.edgelist(data_ways$ways$refs)
is.data.frame(data_ways$ways$refs)
is.matrix(data_ways$ways$refs)
graph = graph.edgelist(as.matrix(data_ways$ways$refs))
dim(as.matrix(data_ways$ways$refs))
help(graph.edgelist()
)
help(graph.edgelist)
dim(as.numeric(as.matrix(data_ways$ways$refs)))
as.numeric(as.matrix(data_ways$ways$refs))
length(as.numeric(as.matrix(data_ways$ways$refs)))
graph.edgelist(matrix(data=c(1,0,0,1),nrow=2))
graph.edgelist(matrix(data=c(2,1,1,2),nrow=2))
summary(as.matrix(data_ways$ways$refs))
graph = graph.edgelist(as.matrix(data_ways$ways$refs))
summary(data_ways)
library(rgexf)
help(rgexf)
help(read.gexf)
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23/35/42-CET-2015.gexf'))
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015.gexf'))
graph = gexf.to.igraph(graph_gexf)
graph_gexf
summary(graph_gexf)
check.dpl.edges(graph_gexf)
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015.gexf'))
graph = gexf.to.igraph(graph_gexf)
measures <- read.csv(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015_Nodes.csv'))
measures <- read.csv(
paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015_Nodes.csv'),
sep=';'
)
summary(measures)
measures$is_cyber
is.na(measures$cybergeo)
colNames(measures)
colnames(measures)
mean(measures$Degré.Entrant)
mean(measures$Degré.Entrant[!is.na(measures$cybergeo)])
summary(measures$Degré.Entrant[!is.na(measures$cybergeo)])
length(measures$Degré.Entrant[!is.na(measures$cybergeo)])
hist(measures$Degré.Entrant[!is.na(measures$cybergeo)])
hist(measures$Degré.Entrant[!is.na(measures$cybergeo)],breaks=100)
indeg = measures$Degré.Entrant[!is.na(measures$cybergeo)]
hist(indeg,breaks=100)
which(indeg==max(indeg))
measures[908,]
max(indeg)
cyb = measures[!is.na(measures$cybergeo),]
dim(cyb)
cyb[which(indeg==max(indeg)),]
mean(cyb$Degré.Entrant)
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.9)])
quantile(cyb$Degré.Entrant,0.9)
quantile(cyb$Degré.Entrant,0.95)
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.95)])
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.99)])
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.90)])
quantiles = (1:100)/100
quantiles
impactFactor=mean(cyb$Degré.Entrant)
help(lapply)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.10)])
quantile(cyb$Degré.Entrant,0.10)
quantiles = (60:100)/100
impactFactor=mean(cyb$Degré.Entrant)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
quantile(cyb$Degré.Entrant,1)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<=quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
quantiles = (50:100)/100
impactFactor=mean(cyb$Degré.Entrant)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<=quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
plot(quantiles,contrQuantile,type="l")
x=rnorm(100)
x
y=rnorm(100)
plot(x,y,axis=FALSE)
plot(x,y,axes=FALSE)
axis(1,pos=0,5)
axis(1,pos=0)
axis(0,pos=0)
axis(2,pos=0)
df
data
d
d <- function(w){
years = c(1,8,17)
dispo = c(27,5 + w * 10,3+w)
return(data.frame(x=years,y=dispo,xl=log(years),yl=log(dispo)))
}
d(0.5)
weights = (1:100)/100
weights
lm(x~y,d(0.5))
slotnames(lm(x~y,d(0.5)))
slotNames(lm(x~y,d(0.5)))
names(lm(x~y,d(0.5)))
names(summary(lm(x~y,d(0.5)))
)
help(append)
weights = (1:100)/100
rlin = c()
rloglin = c()
for(w in weights){
rlin = append(rlin,summary(lm(y~x,d(w)))$adj.r.squared)
rloglin = append(rloglin,summary(lm(yl~xl,d(w)))$adj.r.squared)
}
rlin
rloglin
plot(weights,rlin)
plot(weights,rloglin)
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining'))
overlap <- read.table('Models//Techno//TechnoClasses//res//overlap.csv',sep=";")
links = 0
for(i in 1:nrow(overlap)){
show(i)
links = links + (overlap[i,i]^2)
if(i<nrow(overlap)){
for(j in (i+1):ncol(overlap)){
overlap[j,j] = overlap[j,j] - overlap[i,j]
}
}
}
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining'))
Sys.getenv('CS_HOME')
setwd(paste0(Sys.getenv('CS_HOME'),'/FinancialNetwork/SyntheticAsset/Models'))
getwd()
eurusd <- read.csv('data/EURUSD_201511.csv')
plot((eurusd[,2]+eurusd[,3])/2)
plot((eurusd[,2]+eurusd[,3])/2,type='l')
install.packages('smoother')
library(smoother)
3600*4
s = (eurusd[1:14400,2]+eurusd[1:14400,3])/2
x = log(s/s[1])
x
plot(x,type='l')
f = smth.gaussian(x,window=1800)
points(f,col='red',type='l',add=TRUE)
points(smth.gaussian(x,window=450),col='purple',type='l',add=TRUE)
14400-1800
f2=smth.gaussian(x,window=450)
1801-450
length(f2)
f1=f
plot(x[1801:12600],type='l',main='EUR/USD, 1st November 2015',ylab='log(s/s0)',xlab='time (s)')
#filtering test
#f1 = smth.gaussian(x,window=1800)
#f2=smth.gaussian(x,window=450)
points(f1[1801:12600],col='red',type='l',add=TRUE)
points(f2[1801:12600],col='purple',type='l',add=TRUE)
dx = diff(x)
warnings()
plot(dx,type='l')
help(corr)
help(cor)
eurgbp <- read.csv('data/EURGBP_201511.csv')
s1 = (eurusd[,2]+eurusd[,3])/2
x1 = log(s1/s1[1])
x2 = (eurgbp[,2]+eurgbp[,3])/2
s2 = log(s2/s2[1])
s2 = (eurgbp[,2]+eurgbp[,3])/2
x2 = log(s2/s2[1])
dx1 = diff(x1)
dx2 = diff(x2)
plot(dx1,type='l')
hist(dx1,breaks=1000)
cor(dx1,dx2)
length(dx)
length(dx1)
length(dx2)
head(eurusd)
head(eurgbp)
head(eurgbp,n=100)
head(eurgbp,n=1000)
head(eurgbp,n=3600)
head(eurgbp,n=24*3600)
eurgbp[23*3600:24*3600,]
eurgbp[(23*3600):(24*3600),]
cor(dx1[1:(24*3600)],dx2[1:(24*3600)])
corrs=c()
for(k in 1:3600){
corrs=append(corrs,cor(dx1[1:(24*3600)],dx2[(1:(24*3600))+k]))
}
plot(corrs,type='l')
f1 = smth.gaussian(dx1[1:(26*3600)],window=1800)
sigma=450
k = (-3*sigma):(3*sigma)
length(k)
k = (-3*sigma):(3*sigma)^2
length(k)
k = ((-3*sigma):(3*sigma))^2
length(k)
k = exp(- (((-3*sigma):(3*sigma))^2) / (2*sigma^2))
k
plot(k)
sigma
k = exp(- (((-3*sigma):(3*sigma))^2) / sigma^2)
sigma
plot(k)
k = exp(- (((-3*sigma):(3*sigma))^2) / (sigma/2)^2)
plot(k)
k = exp(- (((-2*sigma):(2*sigma))^2) / (sigma/2)^2)
plot(k)
y=convolve(x[1801:12600],k)
help(convolve)
y=convolve(x[1801:12600],k,type="filter")
y
plot(x[1801:12600],type='l',main='EUR/USD, 1st November 2015',ylab='log(s/s0)',xlab='time (s)')
points(convolve(x[1801:12600],k,type="filter"),col='red',type='l')
points(convolve(x[1801:12600],k,type="filter"),col='red',type='l')
head(convolve(x[1801:12600],k,type="filter"))
plot(convolve(x[1801:12600],k,type="filter"),col='red',type='l')
k = k/sum(k)
plot(x[1801:12600],type='l',main='EUR/USD, 1st November 2015',ylab='log(s/s0)',xlab='time (s)')
points(convolve(x[1801:12600],k,type="filter"),col='red',type='l')
f1 = gaussianFilter(dx1[1:(26*3600)],1800)
gaussianFilter <- function(x,sigma){
# kernel : cut at +- 2 sigma
k = exp(- (((-2*sigma):(2*sigma))^2) / (sigma/2)^2)
k = k/sum(k)
return(convolve(x,k,type="filter"))
}
f1 = gaussianFilter(dx1[1:(26*3600)],1800)
f1 = gaussianFilter(dx2[1:(26*3600)],1800)
f1 = gaussianFilter(dx1[1:(26*3600)],1800)
f2 = gaussianFilter(dx2[1:(26*3600)],1800)
length(f2)
corrs=c()
for(k in 1:3600){
corrs=append(corrs,cor(dx1[1:(24*3600)],dx2[(1:(24*3600))+k]))
}
plot(corrs)
plot(corrs,type='l')
corrs=c()
for(k in 1:3600){
corrs=append(corrs,cor(f1[3601:(25*3600)],f1[(1801:((24*3600)+1800))+k]))
}
plot(corrs,type='l')
corrs
f1
plot(f1)
plot(f1,type='l')
points(f2,type='l',col='red')
k
cor(f1[3601:(25*3600)],f2[(1801:((24*3600)+1800))+k])
f1[3601:(25*3600)]
f1[(25*3600)]
cor(f1[3601:(24*3600)],f2[(1801:((23*3600)+1800))+k])
f1 = gaussianFilter(dx1[1:(30*3600)],1800)
f2 = gaussianFilter(dx2[1:(30*3600)],1800)
cor(f1[3601:(24*3600)],f2[(1801:((23*3600)+1800))+k])
corrs=c()
for(k in 1:3600){
corrs=append(corrs,cor(f1[3601:(24*3600)],f2[(1801:((23*3600)+1800))+k]))
}
plot(corrs,type='l')
corrs=c()
for(k in (0:120)*60+1){
corrs=append(corrs,cor(f1[3601:(24*3600)],f2[(1:(23*3600))+k]))
}
plot(corrs,type='l')
corrs=c()
for(k in (0:240)*60+1){
corrs=append(corrs,cor(f1[7201:(25*3600)],f2[(1:(24*3600))+k]))
}
2*3600
length(7201:(25*3600))
length(1:(24*3600))
corrs=c()
for(k in (0:240)*60+1){
corrs=append(corrs,cor(f1[7201:(25*3600)],f2[(1:(23*3600))+k]))
}
plot(corrs,type='l')
plot(f1)
plot(f1,type='l')
points(f2,type='l',col='red')
plot(dx1,type='l')
f1 = gaussianFilter(dx1,1800)
f2 = gaussianFilter(dx2,1800)
plot(f1)
res = c(0)
res
rnorm(1,10)
rnorm(1,10)
rnorm(1,10)
rnorm(1,0,10)
rnorm(1,0,10)
rnorm(1,0,10)
rnorm(1,0,10)
rnorm(1,0,10)
rnorm(1,0,10)
rnorm(1,0,10)
brownian <- function(sigma,steps){
# starts from 0
res = c(0)
for(t in 1:(steps-1)){
res = append(res,res[t]+rnorm(1,0,sigma))
}
return(res)
}
plot(brownian(0.001,10000))
plot(brownian(0.001,10000),type='l')
hist(diff(brownian(0.001,10000)),breaks=1000)
hist(diff(brownian(0.001,100000)),breaks=1000)
hist(f1,breaks=1000)
hist(f1[f1<quantile(f1,0.95)&f1>quantile(f1,0.05)],breaks=1000)
hist(f1[f1<quantile(f1,0.99)&f1>quantile(f1,0.01)],breaks=1000)
hist(f1[f1<quantile(f1,0.999)&f1>quantile(f1,0.001)],breaks=1000)
length(f1)
plot(f1,type='l')
help(cumsum)
sigma = sd(f1)
df1 = f1
sigma = sd(df1)
sigma
f1 = cumsum(df1)
f1
plot(f1,type='l')
length(f1)
plot(f1[1:2600],type='l')
plot(f1[1:3600],type='l')
help(seq)
f1 = f1[seq(from=1,to=length(f1),by=600)]
length(f1)
plot(f1)
plot(f1,type='l')
synthAsset<- function(original,rho){
# estimate sigma
sigma = sd(diff(original))
indep = brownian(sigma,length(original))
return(rho*original + sqrt(1 - rho^2)*indep)
}
#quick test
plot(diff(f1),type='l')
for(k in 1:10){
points(diff(synthAsset(f1,0.7)),type='l',col=k)
}
plot(diff(f1),type='l')
for(k in 1:2){
points(diff(synthAsset(f1,0.7)),type='l',col=k)
}
corrs=c()
for(k in 1:100){
synth = synthAsset(f1,0.7)
corrs = append(corrs,cor(diff(synth),diff(f1)))
#points(diff(synth),type='l',col=k)
}
hist(corrs,breaks=50)
corrs=c()
for(k in 1:1000){
if(k%%100==0){show(k)}
synth = synthAsset(f1,0.7)
corrs = append(corrs,cor(diff(synth),diff(f1)))
#points(diff(synth),type='l',col=k)
}
hist(corrs,breaks=50)
head(eurusd)
plot(x1,type='l')
plot(x2,type='l')
